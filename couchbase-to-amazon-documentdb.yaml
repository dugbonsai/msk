---
Parameters:
  Ec2KeyPairName:
    Description: Name of EC2 key pair that will be used for EC2 instance.
    Type: String
  SshIngressIpAddress:
    Description: Allow incoming SSH traffic to EC2 instance from this IP address (CIDR notation).
    Type: String
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
  VpcId:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cloudformation-supplied-parameter-types.html#cloudformation-supplied-parameter-types-overview
    Description: ID of an existing Virtual Private Cloud (VPC) where migration resources will be deployed.
    Type: 'AWS::EC2::VPC::Id'
  LatestAmiId:
    # https://docs.aws.amazon.com/linux/al2023/ug/ec2.html#launch-from-cloudformation
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64'
  PublicSubnetId:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cloudformation-supplied-parameter-types.html#cloudformation-supplied-parameter-types-overview
    Description: ID of an existing public subnet within the specified VPC.
    Type: 'AWS::EC2::Subnet::Id'
  PrivateSubnets:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cloudformation-supplied-parameter-types.html#cloudformation-supplied-parameter-types-overview
    Description: Select private subnets within the specified VPC.
    Type: List<AWS::EC2::Subnet::Id>
  DocumentdbUsername:
    Description: Specify an alphanumeric string that defines the login ID for the user.
    Type: String
    MinLength: '1'
    MaxLength: '63'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Username must start with a letter and contain 1 to 63 characters
  DocumentdbPassword:
    NoEcho: 'true'
    Description: Specify an alphanumeric string that defines the password for the user
    Type: String
    MinLength: '8'
    MaxLength: '100'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: Password must contain 8 to 100 characters.
  DocumentdbInstanceType:
    Type: String
    Default: "db.r6g.xlarge"
    AllowedValues:
      - "db.r6g.large"
      - "db.r6g.xlarge"
      - "db.r6g.2xlarge"
      - "db.r6g.4xlarge"
      - "db.r6g.8xlarge"
      - "db.r6g.12xlarge"
      - "db.r6g.16xlarge"
      - "db.t4g.medium"
      - "db.r5.large"
      - "db.r5.xlarge"
      - "db.r5.2xlarge"
      - "db.r5.4xlarge"
      - "db.r5.8xlarge"
      - "db.r5.12xlarge"
      - "db.r5.16xlarge"
      - "db.r5.24xlarge"
      - "db.r4.large"
      - "db.r4.xlarge"
      - "db.r4.2xlarge"
      - "db.r4.4xlarge"
      - "db.r4.8xlarge"
      - "db.r4.12xlarge"
      - "db.r4.16xlarge"
      - "db.t3.medium"
  S3BucketName:
    Description: Name of S3 bucket to store resources needed for MSK
    Type: String
  MskClusterBrokerInstanceType:
    Description: MSK cluster broker size
    Type: String
    Default: "express.m7g.xlarge"
    AllowedValues:
      - "express.m7g.large"
      - "express.m7g.xlarge"
      - "express.m7g.2xlarge"
      - "express.m7g.4xlarge"
      - "express.m7g.8xlarge"
      - "express.m7g.12xlarge"
      - "express.m7g.16xlarge"

Resources:
  # IAM Resources
  MigrationMskPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: 'cfn-migration-msk-policy'
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: 'kafka-cluster:*'
            Resource: !Join
              - ''
              - - 'arn:aws:kafka:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - ':*/*/*'
  MigrationKafkaConnectPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: 'cfn-migration-kafkaconnect-policy'
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: 'kafkaconnect:CreateCustomPlugin'
            Resource: '*'
  MigrationMskRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: 'cfn-migration-msk-role'
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
        - Ref: "MigrationMskPolicy"
      MaxSessionDuration: 3600
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: 'Allow'
            Action: 'sts:AssumeRole'
            Principal:
              Service:
                - kafkaconnect.amazonaws.com
  MigrationEc2MskRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: 'cfn-ec2-msk-role'
      Description: "Allows EC2 instances to call MSK & Kafka Connect on your behalf."
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
        - Ref: "MigrationMskPolicy"
        - Ref: "MigrationKafkaConnectPolicy"
      MaxSessionDuration: 3600
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: 'Allow'
            Action: 'sts:AssumeRole'
            Principal:
              Service:
                - ec2.amazonaws.com
  MigrationEc2InstanceProfile:
    DependsOn: MigrationEc2MskRole
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: 'cfn-ec2-instance-profile'
      Roles:
        - !Ref MigrationEc2MskRole
  
  # EC2 resources
  MigrationEc2SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "security group for Couchbase to DocumentDB migration resources"
      GroupName: "cfn-migration-security-group"
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22      
          CidrIp: !Ref SshIngressIpAddress
  MigrationEc2SecurityGroupIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: MigrationEc2SecurityGroup
    Properties:
      GroupId: !Ref MigrationEc2SecurityGroup
      IpProtocol: "-1"
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId: !Ref MigrationEc2SecurityGroup
  MigrationEc2Instance:
    DependsOn: MigrationEc2InstanceProfile
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref MigrationEc2InstanceProfile
      KeyName: !Ref Ec2KeyPairName
      ImageId: !Ref LatestAmiId
      InstanceType: t2.micro
      Tags:
        - Key: Name
          Value: cfn-msk-ec2
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - Ref: MigrationEc2SecurityGroup
          SubnetId: !Ref PublicSubnetId
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            cd /home/ec2-user

            echo "downloading setup.sh from https://raw.githubusercontent.com/dugbonsai/msk/refs/heads/main/setup.sh ..." >> setup.log
            wget https://raw.githubusercontent.com/dugbonsai/msk/refs/heads/main/setup.sh -O setup.sh 2> wget.log

            echo "making setup.sh executable ..." >> setup.log
            chmod 755 setup.sh

            echo "running setup.sh ${S3BucketName} ${AWS::Region} ..." >> setup.log
            ./setup.sh ${S3BucketName} ${AWS::Region}

# CloudWatch resources
  MigrationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupClass: "STANDARD"
      RetentionInDays: 5
      LogGroupName: "/couchbase/migration"

# Amazon DocumentDB resources
  MigrationDocumentDBSubnetGroup:
    Type: AWS::DocDB::DBSubnetGroup
    Properties:
      DBSubnetGroupName: 'cfn-migration-subnet-group'
      DBSubnetGroupDescription: 'Private subnet group for Amazon DocumentDB'
      SubnetIds: !Split [',', !Join [',', !Ref PrivateSubnets]]
  MigrationDocumentDBCluster:
    DependsOn:
      - MigrationDocumentDBSubnetGroup
      - MigrationEc2SecurityGroup
    Type: AWS::DocDB::DBCluster
    Properties:
        DBClusterIdentifier: 'cfn-documentdb-target'
        DBSubnetGroupName: !Ref MigrationDocumentDBSubnetGroup
        MasterUsername: !Ref DocumentdbUsername
        MasterUserPassword: !Ref DocumentdbPassword
        VpcSecurityGroupIds:
          - !GetAtt MigrationEc2SecurityGroup.GroupId
  MigrationDocumentDBPrimaryInstance:
    DependsOn: MigrationDocumentDBCluster
    Type: AWS::DocDB::DBInstance
    Properties:
      DBClusterIdentifier: !Ref MigrationDocumentDBCluster
      DBInstanceClass: !Ref DocumentdbInstanceType
      DBInstanceIdentifier: cfn-primary-instance
      EnablePerformanceInsights: true

# MSK resources
  MigrationMSKCluster:
    Type: AWS::MSK::Cluster
    Properties:
      BrokerNodeGroupInfo:
        SecurityGroups:
          - !GetAtt MigrationEc2SecurityGroup.GroupId
        ClientSubnets: !Split [',', !Join [',', !Ref PrivateSubnets]]
        InstanceType: !Ref MskClusterBrokerInstanceType
      ClientAuthentication:
        Sasl:
          Iam:
            Enabled: true
      ClusterName: cfn-msk-cluster
      KafkaVersion: 3.6.0
      NumberOfBrokerNodes: 3

# Outputs
Outputs:
  MigrationEc2SecurityGroupId:
    Value: !GetAtt MigrationEc2SecurityGroup.GroupId
    